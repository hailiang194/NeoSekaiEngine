name: Build and Test Engine
run-name: ${{ github.ref }} on ${{ github.repository }} is being built and tested out Github actions
on: [ push, pull_request ]
jobs:
  Build-Engine:
    strategy:
      fail-fast: false
      matrix:
        build_shared: [0, 1]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Check out the repository code
        uses: actions/checkout@v4
      - name: setup library
        if: ${{ matrix.os != 'windows-latest' }}
        run: /bin/bash ./scripts/pre-installer/linux/debian/preinstaller.sh
      - name: build project with test for BUILD_SHARED_LIBS=${{ matrix.build_shared }}
        run: cmake -S ./ -B ./build -DRUN_TEST=1 -DBUILD_SHARED_LIBS=${{ matrix.build_shared }} && cmake --build ./build 
      - name: run test
        if: ${{ matrix.os != 'windows-latest' }}
        run: build/out/engine_test --gtest_output="xml:build/test-results.xml"
      - name: run test
        if: ${{ matrix.os == 'windows-latest' }}
        run: .\build\out\Debug\engine_test.exe --gtest_output="xml:build/test-results.xml"
      - name: Upload test result
        if: ${{ matrix.build_shared == 0 }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{matrix.os}}-static.xml
          path: build/test-results.xml

      - name: Upload test result
        if: ${{ matrix.build_shared == 1 }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{matrix.os}}-shared.xml
          path: build/test-results.xml

      - name: Upload examples
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{matrix.os}}-${{matrix.build_shared}}
          path: build/out

      - name: Upload examples
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{matrix.os}}-${{matrix.build_shared}}
          path: build/out/Debug
  
  Generate-Docs:
    runs-on: "ubuntu-latest"
    needs: Build-Engine
    steps:
      - name: install doxygen and graphviz
        run: sudo apt-get -y install doxygen graphviz
      - name: Check out the repository code
        uses: actions/checkout@v4
      - name: setup library
        run: /bin/bash ./scripts/pre-installer/linux/debian/preinstaller.sh 
      - name: build project with test for shared lib
        run: cmake -S ./ -B ./build -DBUILD_DOC=1 -DBUILD_SHARED_LIBS=1 && cmake --build ./build --target EngineDoc
      - name: Upload test result
        uses: actions/upload-artifact@v4
        with:
          name: html-docs
          path: build/doc/html

  Build-WebAssembly:
    runs-on: "ubuntu-latest"
    needs: Build-Engine
    steps:
      - name: Check out the repository code
        uses: actions/checkout@v4
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.25
          actions-cache-folder: 'emsdk-cache'
      - name: setup library
        run: /bin/bash ./scripts/pre-installer/linux/debian/preinstaller.sh
      - name: Generate project with test for BUILD_SHARED_LIBS=0 
        run: cmake -S . -B build -DPLATFORM=Web -DBUILD_SHARED_LIBS=0 -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake
      - name: Build project
        run: cmake --build ./build     
      - name: List build directory
        run: ls ./build